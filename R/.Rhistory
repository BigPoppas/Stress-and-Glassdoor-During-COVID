which.max(rstudent(lm.fit))
rstudent(lm.fit)[which(rstudent(lm.fit) > 3)]
hatvalues(lm.fit)[which(hatvalues(lm.fit) > 3)]
hatvalues(lm.fit)[which(hatvalues(lm.fit), decreasing=T)][1:5]
hatvalues(lm.fit)[which(hatvalues(lm.fit), decreasing=T)][1:5]
hatvalues(lm.fit)[order(hatvalues(lm.fit), decreasing=T)][1:5]
8 / nrow(carseats)
hatvalues(lm.fit)[order(hatvalues(lm.fit), decreasing=T)][1:10]
set.seed(1)
x <- rnorm(100)
eps <- rnorm(100, 0, 0.25)
y <- -1 + 0.5 * x + eps
plot(x, y)
lm.fit <- lm(y~x)
summary(lm.fit)
abline(lm.fit, col="blue")
plot(x, y)
abline(lm.fit, col="blue")
abline(a=-1, b=0.5, col="red")
lm.fit <- lm(y ~ x + I(x^2))
summary(lm.fit)
set.seed(1)
x1 <- runif(100)
x2 <- 0.5 * x1 + rnorm(100) / 10
y <- 2 + 2 * x1 + 0.3 * x2 + rnorm(100)
plot(x1, x2)
corr(x1, x2)
cor(x1, x2)
lm.fit <- lm(y ~ x1 + x2)
summary(lm.fit)
lm.x1 <- lm(y ~ x1)
summary(lm.x1)
lm.x1 <- lm(y ~ x1)
summary(lm.x1)
lm.x2 <- lm(y ~ x2)
summary(lm.x2)
x1 <- c(x1, 0.1)
x2 <- c(x2, 0.8)
y <- c(y, 6)
lm.x1 <- lm(y ~ x1)
summary(lm.x1)
lm.x2 <- lm(y ~ x2)
summary(lm.x2)
data <- Weekly
summary(data)
pairs(data)
glm.fit1 <- glm(Direction ~. -Year, data)
glm.fit1 <- glm(Direction ~. -Year, data, family=binomial)
glm.fit1 <- glm(Direction ~. -Year, data, family=binomial)
summary(glm.fit1)
glm.fit1 <- glm(Direction ~. -Year, Smarket, family=binomial)
summary(glm.fit1)
glm.fit1 <- glm(Direction ~., Smarket, family=binomial)
summary(glm.fit1)
glm.fit1 <- glm(Direction ~ Lag1 + Lag2, Smarket, family=binomial)
summary(glm.fit1)
glm.fit1 <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, Smarket, family=binomial)
summary(glm.fit1)
glm.fit1 <- glm(Direction ~. -Year -Today, Smarket, family=binomial)
summary(glm.fit1)
glm.fit1 <- glm(Direction ~. -Year -Today, data, family=binomial)
summary(glm.fit1)
glm.fit1 <- glm(Direction ~. -Year -Today, Smarket, family=binomial)
summary(glm.fit1)
glm.fit1 <- glm(Direction ~. -Year -Today, Weekly, family=binomial)
summary(glm.fit1)
contrasts(data$Direction)
glm.probs <- predict(glm.fits, type="response")
glm.probs <- predict(glm.fit, type="response")
glm.probs <- predict(glm.fit1, type="response")
glm.pred <- rep("Down", nrow(data))
glm.pred[glm.probs > .5] = "Up"
table(glm.pred, data$Direction)
data <- Weekly[Weekly$Year >= 1990 & Weekly$Year <= 2008]
data <- Weekly[Weekly$Year >= 1990 & Weekly$Year <= 2008, ]
glm.fit <- glm(Direction ~ Lag2, family="binomial", data=data)
glm.fit <- glm(Direction ~ Lag2, family="binomial", data=data)
summary(glm.fit)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
data = Boston
str(data)
set.seed(1)
test <- sample(1:nrow(data), 100, replace=FALSE)
train <- 1:nrow(data)
train <- train[-test]
cor(data)
round(cor(data), 2)
round(cor(data), 3)
round(cor(data), 4)
round(cor(data), 3)
round(cor(data), 3)[1]
round(cor(data), 3)[1,]
round(cor(data), 5)[1,]
which.max(round(cor(data), 5)[1,])
round(cor(data), 5)[1,])
round(cor(data), 5)[1,]
lm.fit <- lm(crim ~., data=data)
summary(lm.fit)
cor(data$rad, dat$tax)
cor(data$rad, data$tax)
plot(data$rad, data$tax)
plot(data$tax, data$rad)
library(car)
vif(lm.fit)
library(car)
vif(lm.fit)
library(car)
round(vif(lm.fit), 2)
library(leaps)
reg.best <- regsubsets(crim ~., data)
summary(reg.best)
library(leaps)
reg.best <- regsubsets(crim ~., data)
reg.summary <- summary(reg.best)
par(mfrow=c(1, 2))
min_bic <- which.min(reg.summary$bic)
plot(reg.summary$bic, xlab="Number of Variables", ylab="BIC")
points(min_bic, reg.summary$bic[min_bic], col="red")
min_cp <- which.min(reg.summary$cp)
plot(reg.summary$cp, xlab="Number of Variables", ylab="CP")
points(min_cp, reg.summary$cp[min_cp], col="red")
coef(reg.best, 2)
coef(reg.best, 7)
reg.summary
library(pls)
set.seed(1)
pcr.fit <- pcr(crim ~., data=data, scale=TRUE, validation="CV") # important to scale
set.seed(1)
pcr.fit <- pcr(crim ~., data=data, scale=TRUE, validation="CV") # important to scale
summary(pcr.fit)
validationplot(pcr.fit, val.type="MSEP")
set.seed(2)
pcr.fit <- pcr(crim ~., data=data, scale=TRUE, validation="CV") # important to scale
summary(pcr.fit)
set.seed(2)
pcr.fit <- pcr(crim ~., data=data, scale=TRUE, validation="CV") # important to scale
summary(pcr.fit)
validationplot(pcr.fit, val.type="MSEP")
lm.pred <- predict(lm.fit, test)
lm.pred <- predict(lm.fit, newdata=test)
lm.pred <- predict(lm.fit, newdata=data.frame(test))
set.seed(1)
test <- sample(1:nrow(data), 100, replace=FALSE)
train <- 1:nrow(data)
train <- train[-test]
test <- data[test,]
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
data = Boston
str(data)
set.seed(1)
test <- sample(1:nrow(data), 100, replace=FALSE)
train <- 1:nrow(data)
train <- train[-test]
test <- data[test,]
round(cor(data), 3)
round(cor(data), 5)[1,]
lm.fit <- lm(crim ~., data=data)
summary(lm.fit)
cor(data$rad, data$tax)
library(car)
round(vif(lm.fit), 2)
library(leaps)
reg.best <- regsubsets(crim ~., data)
reg.summary <- summary(reg.best)
par(mfrow=c(1, 2))
min_bic <- which.min(reg.summary$bic)
plot(reg.summary$bic, xlab="Number of Variables", ylab="BIC")
points(min_bic, reg.summary$bic[min_bic], col="red")
min_cp <- which.min(reg.summary$cp)
plot(reg.summary$cp, xlab="Number of Variables", ylab="CP")
points(min_cp, reg.summary$cp[min_cp], col="red")
coef(reg.best, 2)
coef(reg.best, 7)
reg.summary
library(pls)
set.seed(2)
pcr.fit <- pcr(crim ~., data=data, scale=TRUE, validation="CV") # important to scale
summary(pcr.fit)
validationplot(pcr.fit, val.type="MSEP")
lm.pred <- predict(lm.fit, newdata=data.frame(test))
lm.pred <- predict(lm.fit, newdata=test)
lm.pred <- predict(lm.fit, newdata=test)
lm.pred
mse <- function(pred, actual) {
return((pred - actual) ^ 2)
}
lm.pred <- predict(lm.fit, newdata=test)
mse(lm.pred, test$crim)
mse <- function(pred, actual) {
return (mean((pred - actual) ^ 2))
}
lm.pred <- predict(lm.fit, newdata=test)
mse(lm.pred, test$crim)
lm.pred.train <- predict(lm.fit)
lm.pred.test <- predict(lm.fit, newdata=test)
mse(lm.pred.train, train$crim)
lm.pred.train <- predict(lm.fit)
lm.pred.test <- predict(lm.fit, newdata=test)
mse(lm.pred.train, train[1])
mse(lm.pred.test, test$crim)
pls.pred.train <- predict(pls.fit, ncomp=7)
pls.pred.train <- predict(pcr.fit, ncomp=7)
pls.pred.train <- predict(pcr.fit, ncomp=7)
mse(pls.pred.train, train[1])
pls.pred.train <- predict(pcr.fit, ncomp=7)
pls.pred.test <- predict(pcr.fit, test, ncomp=7)
mse(pls.pred.train, train[1])
mse(pls.pred.test, test[1])
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
data = Boston
str(data)
set.seed(1)
test <- sample(1:nrow(data), 100, replace=FALSE)
train <- 1:nrow(data)
train <- train[-test]
round(cor(data), 3)
round(cor(data), 5)[1,]
lm.fit <- lm(crim ~., data=data)
summary(lm.fit)
cor(data$rad, data$tax)
library(car)
round(vif(lm.fit), 2)
library(leaps)
reg.best <- regsubsets(crim ~., data)
reg.summary <- summary(reg.best)
par(mfrow=c(1, 2))
min_bic <- which.min(reg.summary$bic)
plot(reg.summary$bic, xlab="Number of Variables", ylab="BIC")
points(min_bic, reg.summary$bic[min_bic], col="red")
min_cp <- which.min(reg.summary$cp)
plot(reg.summary$cp, xlab="Number of Variables", ylab="CP")
points(min_cp, reg.summary$cp[min_cp], col="red")
coef(reg.best, 2)
coef(reg.best, 7)
reg.summary
library(pls)
set.seed(2)
pcr.fit <- pcr(crim ~., data=data, scale=TRUE, validation="CV") # important to scale
summary(pcr.fit)
validationplot(pcr.fit, val.type="MSEP")
mse <- function(pred, actual) {
return (mean((pred - actual) ^ 2))
}
lm.pred.train <- predict(lm.fit)
lm.pred.test <- predict(lm.fit, newdata=data[test, ])
mse(lm.pred.train, train[1])
mse(lm.pred.test, test$crim)
lm.pred.train <- predict(lm.fit)
lm.pred.test <- predict(lm.fit, newdata=data[test, ])
mse(lm.pred.train, train[1])
mse(lm.pred.test, data[test, ]$crim)
pls.pred.train <- predict(pcr.fit, ncomp=7)
pls.pred.test <- predict(pcr.fit, test, ncomp=7)
pls.pred.train <- predict(pcr.fit, ncomp=7)
pls.pred.test <- predict(pcr.fit, data[test, ], ncomp=7)
mse(pls.pred.train, train[1])
mse(pls.pred.test, data[test, ]$crim)
```{r}
pls.pred.train <- predict(pcr.fit, ncomp=3)
pls.pred.test <- predict(pcr.fit, data[test, ], ncomp=3)
mse(pls.pred.train, train[1])
mse(pls.pred.test, data[test, ]$crim)
pls.pred.train <- predict(pcr.fit, ncomp=5)
pls.pred.test <- predict(pcr.fit, data[test, ], ncomp=3)
mse(pls.pred.train, train[1])
mse(pls.pred.test, data[test, ]$crim)
pls.pred.train <- predict(pcr.fit, ncomp=5)
pls.pred.test <- predict(pcr.fit, data[test, ], ncomp=5)
mse(pls.pred.train, train[1])
mse(pls.pred.test, data[test, ]$crim)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
data = Boston
str(data)
set.seed(1)
test <- sample(1:nrow(data), 100, replace=FALSE)
train <- 1:nrow(data)
train <- train[-test]
train <- data[train, ]
test <- data[test, ]
dim(train)
dim(test)
round(cor(data), 3)
round(cor(data), 5)[1,]
lm.fit <- lm(crim ~., data=train)
summary(lm.fit)
cor(data$rad, data$tax)
library(car)
round(vif(lm.fit), 2)
library(car)
round(vif(lm.fit), 2)
library(leaps)
reg.best <- regsubsets(crim ~., train)
reg.summary <- summary(reg.best)
par(mfrow=c(1, 2))
min_bic <- which.min(reg.summary$bic)
plot(reg.summary$bic, xlab="Number of Variables", ylab="BIC")
points(min_bic, reg.summary$bic[min_bic], col="red")
min_cp <- which.min(reg.summary$cp)
plot(reg.summary$cp, xlab="Number of Variables", ylab="CP")
points(min_cp, reg.summary$cp[min_cp], col="red")
coef(reg.best, 2)
coef(reg.best, 6)
reg.summary
library(pls)
set.seed(2)
pcr.fit <- pcr(crim ~., data=train, scale=TRUE, validation="CV") # important to scale
summary(pcr.fit)
validationplot(pcr.fit, val.type="MSEP")
lm.pred.train <- predict(lm.fit)
lm.pred.test <- predict(lm.fit, newdata=test)
mse(lm.pred.train, train[1])
mse(lm.pred.test, data[test, ]$crim)
lm.pred.train <- predict(lm.fit)
lm.pred.test <- predict(lm.fit, newdata=data[test, ])
lm.pred.train <- predict(lm.fit)
lm.pred.test <- predict(lm.fit, newdata=test)
mse(lm.pred.train, train[1])
mse(lm.pred.test, test$crim)
lm.pred.train <- predict(lm.fit)
lm.pred.test <- predict(lm.fit, newdata=test)
mse(lm.pred.train, train$crim)
mse(lm.pred.test, test$crim)
pls.pred.train <- predict(pcr.fit, ncomp=7)
pls.pred.test <- predict(pcr.fit, test, ncomp=7)
mse(pls.pred.train, train$crim)
mse(pls.pred.test, test$crim)
pls.pred.train <- predict(pcr.fit, ncomp=3)
pls.pred.test <- predict(pcr.fit, test, ncomp=3)
mse(pls.pred.train, train$crim)
mse(pls.pred.test, test$crim)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
data = Boston
str(data)
set.seed(1)
test <- sample(1:nrow(data), 100, replace=FALSE)
train <- 1:nrow(data)
train <- train[-test]
train <- data[train, ]
test <- data[test, ]
dim(train)
dim(test)
round(cor(data), 3)
round(cor(data), 5)[1,]
lm.fit <- lm(crim ~., data=train)
summary(lm.fit)
cor(data$rad, data$tax)
library(car)
round(vif(lm.fit), 2)
library(leaps)
reg.best <- regsubsets(crim ~., train)
reg.summary <- summary(reg.best)
par(mfrow=c(1, 2))
min_bic <- which.min(reg.summary$bic)
plot(reg.summary$bic, xlab="Number of Variables", ylab="BIC")
points(min_bic, reg.summary$bic[min_bic], col="red")
min_cp <- which.min(reg.summary$cp)
plot(reg.summary$cp, xlab="Number of Variables", ylab="CP")
points(min_cp, reg.summary$cp[min_cp], col="red")
coef(reg.best, 2)
coef(reg.best, 6)
reg.summary
library(pls)
set.seed(2)
pcr.fit <- pcr(crim ~., data=train, scale=TRUE, validation="CV") # important to scale
summary(pcr.fit)
validationplot(pcr.fit, val.type="MSEP")
mse <- function(pred, actual) {
return (mean((pred - actual) ^ 2))
}
lm.pred.train <- predict(lm.fit)
lm.pred.test <- predict(lm.fit, newdata=test)
mse(lm.pred.train, train$crim)
mse(lm.pred.test, test$crim)
pls.pred.train <- predict(pcr.fit, ncomp=3)
pls.pred.test <- predict(pcr.fit, test, ncomp=3)
mse(pls.pred.train, train$crim)
mse(pls.pred.test, test$crim)
set.seed(2)
pcr.fit <- pcr(crim ~., data=data, subset=train, scale=TRUE, validation="CV") # important to scale
set.seed(1)
test <- sample(1:nrow(data), 100, replace=FALSE)
train_i <- 1:nrow(data)
train_i <- train[-test]
train <- data[train_i, ]
set.seed(1)
test <- sample(1:nrow(data), 100, replace=FALSE)
train_i <- 1:nrow(data)
train_i <- train[-test]
train <- data[train_i, ]
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
data = Boston
str(data)
set.seed(1)
test <- sample(1:nrow(data), 100, replace=FALSE)
train_i <- 1:nrow(data)
train_i <- train[-test]
train <- data[train_i, ]
set.seed(1)
test_i <- sample(1:nrow(data), 100, replace=FALSE)
train_i <- 1:nrow(data)
train_i <- train_i[-test_i]
train <- data[train_i, ]
test <- data[test_i, ]
dim(train)
dim(test)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
data = Boston
str(data)
set.seed(1)
test_i <- sample(1:nrow(data), 100, replace=FALSE)
train_i <- 1:nrow(data)
train_i <- train_i[-test_i]
train <- data[train_i, ]
test <- data[test_i, ]
dim(train)
dim(test)
round(cor(data), 3)
round(cor(data), 5)[1,]
lm.fit <- lm(crim ~., data=train)
summary(lm.fit)
cor(data$rad, data$tax)
library(car)
round(vif(lm.fit), 2)
library(leaps)
reg.best <- regsubsets(crim ~., train)
reg.summary <- summary(reg.best)
par(mfrow=c(1, 2))
min_bic <- which.min(reg.summary$bic)
plot(reg.summary$bic, xlab="Number of Variables", ylab="BIC")
points(min_bic, reg.summary$bic[min_bic], col="red")
min_cp <- which.min(reg.summary$cp)
plot(reg.summary$cp, xlab="Number of Variables", ylab="CP")
points(min_cp, reg.summary$cp[min_cp], col="red")
coef(reg.best, 2)
coef(reg.best, 6)
reg.summary
library(pls)
set.seed(2)
pcr.fit <- pcr(crim ~., data=data, scale=TRUE, validation="CV") # important to scale
summary(pcr.fit)
validationplot(pcr.fit, val.type="MSEP")
mse <- function(pred, actual) {
return (mean((pred - actual) ^ 2))
}
lm.pred.train <- predict(lm.fit)
lm.pred.test <- predict(lm.fit, newdata=test)
mse(lm.pred.train, train$crim)
mse(lm.pred.test, test$crim)
pls.pred.train <- predict(pcr.fit, ncomp=3)
pls.pred.test <- predict(pcr.fit, test, ncomp=3)
mse(pls.pred.train, train$crim)
mse(pls.pred.test, test$crim)
set.seed(2)
pcr.fit <- pcr(crim ~., data=data, subset=train_i, scale=TRUE, validation="CV") # important to scale
summary(pcr.fit)
validationplot(pcr.fit, val.type="MSEP")
mse <- function(pred, actual) {
return (mean((pred - actual) ^ 2))
}
lm.pred.train <- predict(lm.fit)
lm.pred.test <- predict(lm.fit, newdata=test)
mse(lm.pred.train, train$crim)
mse(lm.pred.test, test$crim)
pls.pred.train <- predict(pcr.fit, ncomp=3)
pls.pred.test <- predict(pcr.fit, test_i, ncomp=3)
pls.pred.train <- predict(pcr.fit, ncomp=3)
pls.pred.test <- predict(pcr.fit, data[test_i, ], ncomp=3)
mse(pls.pred.train, train$crim)
mse(pls.pred.test, test$crim)
q()
install.packages("lfe")
install.packages("dplyr")
library(lfe)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
install.packages("lfe")
install.packages("dplyr")
install.packages("dplyr")
library(lfe)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
DIRECTORY = getwd()
setwd(DIRECTORY)
FILE_PATH = "../data/"
df_train = read.csv(paste0(FILE_PATH, "stata_v1.csv"), row.names=1) # skip the index
FILE_PATH = "../data/"
reviews = read.csv(paste0(FILE_PATH, "stata_v1.csv")) # skip the index
model <- felm(
as.formula("has_stress ~ before_covid + after_covid | company_id"),
data=reviews,
family=binomial(link="logit")
)
model <- felm(
as.formula("has_stress ~ before_covid + after_covid | company_id"),
data=reviews
)
knitr::opts_chunk$set(echo = TRUE)
install.packages("lfe")
install.packages("dplyr")
library(lfe)
library(dplyr)
DIRECTORY = getwd()
setwd(DIRECTORY)
FILE_PATH = "../data/"
reviews = read.csv(paste0(FILE_PATH, "stata_v1.csv")) # skip the index
